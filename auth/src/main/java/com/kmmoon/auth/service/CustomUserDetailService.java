package com.kmmoon.auth.service;import com.kmmoon.domain.entity.user.User;import com.kmmoon.domain.entity.user.UserRepository;import lombok.RequiredArgsConstructor;import org.springframework.security.authentication.AccountStatusUserDetailsChecker;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import java.util.Arrays;@RequiredArgsConstructor@Servicepublic class CustomUserDetailService implements UserDetailsService {    private final UserRepository userRepository;    private final PasswordEncoder passwordEncoder;    private final AccountStatusUserDetailsChecker detailsChecker = new AccountStatusUserDetailsChecker();    @PostConstruct    public void initialize(){        System.out.println("endcode1 = " + passwordEncoder.encode("clientSecret"));        String password = passwordEncoder.encode("test");        System.out.println("endcode2 = " + password);        userRepository.save(User.builder().email("test@test.test").nickname("test").accountType(User.AccountType.MEMBER).password(password).build());    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = userRepository.findByEmail(username).orElseThrow(() -> new UsernameNotFoundException("user is not exists"));        user.setRoles(Arrays.asList(user.getAccountType().toString()));        detailsChecker.check(user);        return user;    }}