package com.kmmoon.auth.controller;import com.google.gson.Gson;import com.google.gson.JsonObject;import com.kmmoon.auth.config.OAuthToken;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.codec.binary.Base64;import org.springframework.http.*;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;@Slf4j@RequiredArgsConstructor@RestController@RequestMapping("/oauth2")public class OAuth2Controller {    private final Gson gson;    private final RestTemplate restTemplate;    @GetMapping(value = "/callback")    public OAuthToken callback(@RequestParam String code) {        log.info("Request param cde = " + code);        String credentials = "clientId:{bcrypt}$2a$10$jT07iKxkrnm2C1wpbr1KKO.X/iEok0Str2UpynrFdBbEDf48AQU/a";        String encodedCredentials = new String(Base64.encodeBase64(credentials.getBytes()));        HttpHeaders headers = new HttpHeaders();        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);        headers.add("Authorization", "Basic " + encodedCredentials);        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.add("code", code);        params.add("grant_type", "authorization_code");        params.add("redirect_uri", "http://localhost:8901/oauth2/callback");        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(params, headers);        ResponseEntity<String> response                = restTemplate.postForEntity("http://localhost:8901/oauth/token", request, String.class);        if (response.getStatusCode() == HttpStatus.OK) {            return gson.fromJson(response.getBody(), OAuthToken.class);        }        return null;    }}